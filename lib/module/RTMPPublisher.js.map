{"version":3,"sources":["RTMPPublisher.tsx"],"names":["React","forwardRef","useImperativeHandle","NativeModules","PublisherComponent","RTMPModule","RTMPPublisher","ref","onConnectionFailed","onConnectionStarted","onConnectionSuccess","onDisconnect","onNewBitrateReceived","onStreamStateChanged","props","startStream","stopStream","isStreaming","isCameraOnPreview","getPublishURL","hasCongestion","isAudioPrepared","isVideoPrepared","isMuted","mute","unmute","switchCamera","toggleFlash","handleOnConnectionFailed","e","nativeEvent","data","handleOnConnectionStarted","handleOnConnectionSuccess","handleOnDisconnect","handleOnNewBitrateReceived","handleOnStreamStateChanged"],"mappings":"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","sourcesContent":["import React, { forwardRef, useImperativeHandle } from 'react';\nimport { NativeModules, ViewStyle } from 'react-native';\nimport PublisherComponent, {\n  DisconnectType,\n  ConnectionFailedType,\n  ConnectionStartedType,\n  ConnectionSuccessType,\n  NewBitrateReceivedType,\n  StreamStateChangedType,\n} from './Component';\nimport type { RTMPPublisherRefProps, StreamState } from './types';\n\nconst RTMPModule = NativeModules.RTMPPublisher;\nexport interface RTMPPublisherProps {\n  style?: ViewStyle;\n  streamURL: string;\n  streamName: string;\n  /**\n   * Callback for connection fails on RTMP server\n   */\n  onConnectionFailed?: (data: string) => void;\n  /**\n   * Callback for starting connection to RTMP server\n   */\n  onConnectionStarted?: (data: string) => void;\n  /**\n   * Callback for connection successfully to RTMP server\n   */\n  onConnectionSuccess?: (data: null) => void;\n  /**\n   * Callback for disconnect successfully to RTMP server\n   */\n  onDisconnect?: (data: null) => void;\n  /**\n   * Callback for receiving new bitrate value about stream\n   */\n  onNewBitrateReceived?: (data: number) => void;\n  /**\n   * Alternatively callback for changing stream state\n   * Returns parameter StreamState type\n   */\n  onStreamStateChanged?: (data: StreamState) => void;\n}\n\nconst RTMPPublisher = forwardRef<RTMPPublisherRefProps, RTMPPublisherProps>(\n  (\n    {\n      onConnectionFailed,\n      onConnectionStarted,\n      onConnectionSuccess,\n      onDisconnect,\n      onNewBitrateReceived,\n      onStreamStateChanged,\n      ...props\n    },\n    ref\n  ) => {\n    const startStream = async () => await RTMPModule.startStream();\n\n    const stopStream = async () => await RTMPModule.stopStream();\n\n    const isStreaming = async () => RTMPModule.isStreaming();\n\n    const isCameraOnPreview = async () => RTMPModule.isCameraOnPreview();\n\n    const getPublishURL = async () => RTMPModule.getPublishURL();\n\n    const hasCongestion = async () => RTMPModule.hasCongestion();\n\n    const isAudioPrepared = async () => RTMPModule.isAudioPrepared();\n\n    const isVideoPrepared = async () => RTMPModule.isVideoPrepared();\n\n    const isMuted = async () => RTMPModule.isMuted();\n\n    const mute = () => RTMPModule.mute();\n\n    const unmute = () => RTMPModule.unmute();\n\n    const switchCamera = () => RTMPModule.switchCamera();\n\n    const toggleFlash = () => RTMPModule.toggleFlash();\n\n    const handleOnConnectionFailed = (e: ConnectionFailedType) => {\n      onConnectionFailed && onConnectionFailed(e.nativeEvent.data);\n    };\n\n    const handleOnConnectionStarted = (e: ConnectionStartedType) => {\n      onConnectionStarted && onConnectionStarted(e.nativeEvent.data);\n    };\n\n    const handleOnConnectionSuccess = (e: ConnectionSuccessType) => {\n      onConnectionSuccess && onConnectionSuccess(e.nativeEvent.data);\n    };\n\n    const handleOnDisconnect = (e: DisconnectType) => {\n      onDisconnect && onDisconnect(e.nativeEvent.data);\n    };\n\n    const handleOnNewBitrateReceived = (e: NewBitrateReceivedType) => {\n      onNewBitrateReceived && onNewBitrateReceived(e.nativeEvent.data);\n    };\n\n    const handleOnStreamStateChanged = (e: StreamStateChangedType) => {\n      onStreamStateChanged && onStreamStateChanged(e.nativeEvent.data);\n    };\n\n    useImperativeHandle(ref, () => ({\n      startStream,\n      stopStream,\n      isStreaming,\n      isCameraOnPreview,\n      getPublishURL,\n      hasCongestion,\n      isAudioPrepared,\n      isVideoPrepared,\n      isMuted,\n      mute,\n      unmute,\n      switchCamera,\n      toggleFlash,\n    }));\n\n    return (\n      <PublisherComponent\n        {...props}\n        onDisconnect={handleOnDisconnect}\n        onConnectionFailed={handleOnConnectionFailed}\n        onConnectionStarted={handleOnConnectionStarted}\n        onConnectionSuccess={handleOnConnectionSuccess}\n        onNewBitrateReceived={handleOnNewBitrateReceived}\n        onStreamStateChanged={handleOnStreamStateChanged}\n      />\n    );\n  }\n);\n\nexport default RTMPPublisher;\n"]}